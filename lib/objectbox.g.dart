// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'domain/models/categories.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 6021243282989534560),
      name: 'CategoryModel',
      lastPropertyId: const IdUid(6, 7890501755573957432),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8039071760297757110),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5980483314665068543),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7890501755573957432),
            name: 'exerciseID',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 3239157530916491623),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        9094111669421100780,
        3206280051101722659,
        3239157530916491623
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6598842003284974114,
        6609918529438852285,
        3815906068347148255,
        783495783873958253,
        5913113293760049399,
        542818330347736432,
        479706591548278172,
        3179729557574205559,
        3365715084872639471,
        6273715375597552464,
        9104911079021571558,
        2995355860309244338,
        4789633231888622112,
        1814612713478857382,
        2666629827169518153,
        6550020056526959831,
        1073426287236580566,
        8051401942377891897,
        8812753138691913189,
        3506835261458148773,
        1988767526283851187,
        3931781926799625167
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CategoryModel: EntityDefinition<CategoryModel>(
        model: _entities[0],
        toOneRelations: (CategoryModel object) => [],
        toManyRelations: (CategoryModel object) => {},
        getId: (CategoryModel object) => object.id,
        setId: (CategoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final exerciseIDOffset = fbb.writeList(
              object.exerciseID.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(5, exerciseIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final exerciseIDParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final object = CategoryModel(
              id: idParam, name: nameParam, exerciseID: exerciseIDParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CategoryModel] entity fields to define ObjectBox queries.
class CategoryModel_ {
  /// see [CategoryModel.id]
  static final id =
      QueryIntegerProperty<CategoryModel>(_entities[0].properties[0]);

  /// see [CategoryModel.name]
  static final name =
      QueryStringProperty<CategoryModel>(_entities[0].properties[1]);

  /// see [CategoryModel.exerciseID]
  static final exerciseID =
      QueryStringVectorProperty<CategoryModel>(_entities[0].properties[2]);
}
